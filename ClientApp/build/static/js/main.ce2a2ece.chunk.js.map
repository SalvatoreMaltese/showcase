{"version":3,"sources":["components/MapContainer.js","components/CoordinatesData.js","components/ProbeContainer.js","App.js","registerServiceWorker.js","index.js"],"names":["mapStyles","width","height","MapContainer","props","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onInfoWindowClose","state","setCoordinates","visibleInfo","this","actived","mf","refs","map","children","find","key","markerKey","google","maps","Marker","position","ref","zoom","style","initialCenter","initialPosition","center","data","unitD","lat","lng","lon","unit","name","gpsT","onClick","onClose","visible","Component","GoogleApiWrapper","apiKey","CoordinatesData","entry","changed","coordinates","loading","className","id","aria-labelledby","mil","ProbeContainer","changedCoordinate","selectedCoordinate","init","posmsg","populateData","fetch","response","json","App","Container","displayName","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ce2a2ece.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper, InfoWindow, Marker  } from 'google-maps-react';\r\n\r\nconst mapStyles = {\r\n    width: '100%',\r\n    height: '100%'\r\n};\r\n\r\nexport class MapContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showingInfoWindow: false,  // Hides or shows the InfoWindow\r\n            activeMarker: {},          // Shows the active marker upon click\r\n            selectedPlace: {}         // Shows the InfoWindow to the selected place upon a marker\r\n        };   \r\n    }\r\n\r\n\r\n    onMarkerClick = (props, marker, e) => {\r\n        this.setState({\r\n            selectedPlace: props,\r\n            activeMarker: marker,\r\n            showingInfoWindow: true\r\n        });\r\n    }\r\n\r\n    onInfoWindowClose = () => {\r\n        if (this.state.showingInfoWindow) {\r\n            this.setState({\r\n                showingInfoWindow: false,\r\n                activeMarker: null\r\n            });\r\n        }\r\n    };\r\n\r\n    setCoordinates = (props, marker, e) => {\r\n        //this.setState({ initialPosition : { lat: lat, lng: long }})\r\n        this.onMarkerClick(props, marker, e);\r\n    };\r\n    \r\n    componentDidUpdate() {\r\n       /* if (this.props.actived && this.semaforo === false) {\r\n            var marker = this.refs.map.props.children[0].find(e => e.key == this.props.markerKey);\r\n            marker.props.onClick();\r\n            this.semaforo = true;\r\n        }*/\r\n    }\r\n\r\n    render() {\r\n        var marker = {};\r\n        \r\n        var visibleInfo = false;\r\n        if (this.props.actived && !this.state.showingInfoWindow) {\r\n\r\n            var mf = this.refs.map.props.children[0].find(e => e.key == this.props.markerKey);\r\n            marker = new this.props.google.maps.Marker({\r\n                position: mf.props.position,\r\n                map: this.refs.map\r\n            });\r\n\r\n            visibleInfo = true;\r\n\r\n        }\r\n        else if (this.state.showingInfoWindow) {\r\n            marker = this.state.activeMarker;\r\n            visibleInfo = this.state.showingInfoWindow;\r\n        }\r\n        else {\r\n            visibleInfo = false;\r\n        }\r\n        return (\r\n            <Map ref='map'\r\n                google={this.props.google}\r\n                zoom={10}\r\n                style={mapStyles}\r\n                initialCenter={this.props.initialPosition}\r\n                center={this.props.initialPosition}\r\n            >\r\n                {\r\n                    this.props.data.map(unitD => \r\n                        <Marker\r\n                            position={{ lat: unitD.lat / 10000000, lng: unitD.lon / 10000000  }}\r\n                            key={unitD.unit}\r\n                            name={unitD.gpsT}\r\n                            onClick={this.onMarkerClick}\r\n                        />\r\n                    )\r\n                }\r\n                \r\n                <InfoWindow onClose={this.onInfoWindowClose}\r\n\r\n                    marker={marker}\r\n                    visible={visibleInfo}\r\n                >\r\n                    <div>\r\n                        \r\n                    </div>\r\n                </InfoWindow>\r\n\r\n               \r\n               \r\n            </Map>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: 'AIzaSyCtIwH-7rVZSFzgGdMJyuqiu3xHdZp35Pw'\r\n    \r\n})(MapContainer);\r\n\r\n","import React, { Component } from 'react';\r\n\r\n\r\nexport class CoordinatesData extends Component {\r\n    //static displayName = FetchData.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { coordinates: [], loading: true };\r\n    }\r\n\r\n    \r\n   \r\n \r\n    entry = (lat, lng, unit) => {\r\n        this.props.changed(lat, lng, unit);\r\n    }\r\n\r\n    render() {\r\n       /* let contents = this.state.loading\r\n            ? <p><em>Loading...</em></p>\r\n            : CoordinatesData.renderTable(this.state.coordinates);\r\n            */\r\n        //let contents = CoordinatesData.renderTable(this.state.coordinates);\r\n        return (\r\n            <div className=\"table-wrapper-scroll-y my-custom-scrollbar\">\r\n                <h1 id=\"tabelLabel\" >Coordinates</h1>\r\n                <p></p>\r\n                <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Unit</th>\r\n                            <th>Gps Timestamp</th>\r\n                            <th>Milage</th>\r\n\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.props.data.map(unitD =>\r\n                            <tr onClick={() => this.entry(unitD.lat / 10000000, unitD.lon / 10000000, unitD.unit)}\r\n                                key={unitD.unit}>\r\n                                <td>{unitD.unit}</td>\r\n                                <td>{unitD.gpsT}</td>\r\n                                <td>{unitD.mil}</td>\r\n                           \r\n                        </tr>\r\n                    )} \r\n                       \r\n                       \r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n}\r\n","import React, { Component } from 'react';\r\nimport MapX, { MapContainer } from './MapContainer';\r\nimport { CoordinatesData } from './CoordinatesData';\r\n\r\nexport class ProbeContainer extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            posmsg: [],\r\n            init: { lat: 8, lng: 45 },\r\n            selectedCoordinate: false,\r\n            unit: 0\r\n        };\r\n        //this.MapRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.populateData();\r\n        \r\n    }\r\n\r\n    changedCoordinate = (lat, lng, unit) => {\r\n       \r\n        this.setState({ selectedCoordinate: true, init: { lat: lat, lng: lng }, unit: unit });\r\n        \r\n        /*this.MapRef.current.setState({\r\n            selectedPlace: {\r\n                name: 'jkjkjk'\r\n            },\r\n            activeMarker: {\r\n                lat: lat, lng: lng\r\n            },\r\n            showingInfoWindow: true\r\n        });*/\r\n        //MapContainer.setCoordinates({\r\n       /* this.refs.MapRef.mapRef.current.setCoordinates({\r\n            selectedPlace: {\r\n                name: 'jkjkjk'\r\n            }\r\n        }, {\r\n            lat: lat, lng: lng\r\n        }, {}\r\n        )*/\r\n    \r\n        \r\n    }\r\n\r\n    render() {\r\n       \r\n        return (  \r\n            <div className=\"d-md-flex h-md-100 align-items-center\" >\r\n                <div className=\"col-md-6 p-0 bg-indigo h-md-100\">\r\n                    <CoordinatesData\r\n                        changed={this.changedCoordinate}\r\n                        data={this.state.posmsg}\r\n                    />\r\n            </div>\r\n                {/* <MapX ref={instance}/> */}\r\n                \r\n                {/* <MapContainer initialCenter={this.state.initialCoordinates} /> */}\r\n                <div className=\"col-md-6 p-0 bg-white h-md-100 loginarea\">\r\n                    <MapX ref='MapRef' initialPosition={this.state.init}\r\n                        actived={this.state.selectedCoordinate}\r\n                        markerKey={this.state.unit}\r\n                        data={this.state.posmsg} />  \r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    async populateData() {\r\n        const response = await fetch('posmsgs');\r\n        const data = await response.json();\r\n        this.setState({ posmsg: data });\r\n        this.setState({ init: { lat: data[0].lat / 10000000, lng: data[0].lon / 10000000} }) \r\n    }\r\n    \r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { ProbeContainer } from './components/ProbeContainer';\r\nimport { Container } from 'reactstrap';\r\nimport './custom.css'\r\nimport { extend } from 'jquery';\r\n\r\nexport default class App extends Component {\r\n  static displayName = App.name;\r\n\r\n  render () {\r\n    return (\r\n    \r\n          < div >\r\n         \r\n          <Container>\r\n            < ProbeContainer />\r\n          </Container>\r\n      </div >\r\n        \r\n    );\r\n  }\r\n}\r\n\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}